if (!require("randomForest")) {
install.packages("randomForest", repos="http://cran.rstudio.com/")
library(randomForest)
}
if (!require("dplyr")) {
install.packages("dplyr", repos="http://cran.rstudio.com/")
library(dplyr)
}
if (!require("caTools")) {
install.packages("caTools", repos="http://cran.rstudio.com/")
library(caTools)
}
# Save filepath to variable
training_data_filepath <- "C:/Development/Kaggle/House Prices - Advanced Regression Techniques/train.csv"
# Import data
dataset <- read.csv(training_data_filepath)
# View some stats and information about the data
summary(dataset)
# Split data into training and validation data, for both predictors and target.
set.seed(42)
split <- sample.split(dataset, SplitRatio=0.7)  # for training data
training_set <- subset(dataset, split==TRUE)
test_set <- subset(dataset, split==FALSE)
# Create the training and tests dataframe with the initial predictors
predictors <- c("LotArea", "YearBuilt", "X1stFlrSF", "X2ndFlrSF",
"FullBath", "BedroomAbvGr", "TotRmsAbvGrd", "SalePrice")
training_set <- training_set %>%
select(predictors)
test_set <- test_set %>%
select(predictors)
# Create the predictor variable
X <- training_set %>%
select(-SalePrice)
# Select the target variable and call it y
y <- training_set$SalePrice
# Fitting Random Forest Regression to the dataset
regressor <- randomForest(x=X, y=y, ntree=100)
# Predicting a new result
y_pred <- predict(regressor, newdata=test_set)
# Calculating the MAE
mae <- function(error)
{
mean(abs(error))
}
error <- (y - y_pred)
mae(error)
error
ntrees = c(10, 50, 100, 500, 1000, 5000)
for (i in ntrees) {
i
}
for (i in ntrees) {
print(i)
}
# Create a function to get the MAE for multiple ntree values
getMae <- function(X, y, test_data, n) {
regressor <- randomForest(x=X, y=y, ntree=n)
y_prediction <- predict(regressor, newdata=test_data)
error <- (y - y_prediction)
mae(error)
}
for (i in ntrees) {
getMae(X, y, test_set, i)
}
for (i in ntrees) {
print(getMae(X, y, test_set, i))
}
for (i in ntrees) {
getMae(X, y, test_set, i)
}
getMae <- function(X, y, test_data, n) {
regressor <- randomForest(x=X, y=y, ntree=n)
y_prediction <- predict(regressor, newdata=test_data)
error <- (y - y_prediction)
return(mae(error))
}
for (i in ntrees) {
getMae(X, y, test_set, i)
}
getMae <- function(X, y, test_data, n) {
regressor <- randomForest(x=X, y=y, ntree=n)
y_prediction <- predict(regressor, newdata=test_data)
error <- (y - y_prediction)
print(mae(error))
}
for (i in ntrees) {
getMae(X, y, test_set, i)
}
getMae <- function(X, y, test_data, n) {
regressor <- randomForest(x=X, y=y, ntree=n)
y_prediction <- predict(regressor, newdata=test_data)
error <- (y_prediction - y)
print(mae(error))
}
for (i in ntrees) {
getMae(X, y, test_set, i)
}
error <- (y_pred - y)
for (i in ntrees) {
getMae(X, y, test_set, i)
}
getMae <- function(X, y, test_data, n) {
regressor <- randomForest(x=X, y=y, ntree=n)
y_prediction <- predict(regressor, newdata=test_data)
error <- (y_prediction - y)
print(paste("ntrees of ", n, ":", mae(error)))
}
ntrees = c(10, 50, 100, 500, 1000, 5000)
for (i in ntrees) {
getMae(X, y, test_set, i)
}
getMae <- function(X, y, test_data, n) {
regressor <- randomForest(x=X, y=y, ntree=n)
y_prediction <- predict(regressor, newdata=test_data)
error <- (y_prediction - y)
print(paste("ntree equals", n, ":", mae(error)))
}
for (i in ntrees) {
getMae(X, y, test_set, i)
}
for (i in ntrees) {
suppressWarnings(getMae(X, y, test_set, i))
}
nrow(y_pred)
nrow(y)
getMae <- function(X, y, test_data, n) {
regressor <- randomForest(x=X, y=y, ntree=n)
y_prediction <- predict(regressor, newdata=test_data)
print(nrow(y))
print(nrow(y_prediction))
error <- (y_prediction - y)
print(paste("ntree equals", n, ":", mae(error)))
}
for (i in ntrees) {
getMae(X, y, test_set, i)
}
?nrow
View(test_set)
y_test <- test_set$SalePrice
# Install and load packages
if (!require("randomForest")) {
install.packages("randomForest", repos="http://cran.rstudio.com/")
library(randomForest)
}
if (!require("dplyr")) {
install.packages("dplyr", repos="http://cran.rstudio.com/")
library(dplyr)
}
if (!require("caTools")) {
install.packages("caTools", repos="http://cran.rstudio.com/")
library(caTools)
}
# Save filepath to variable
training_data_filepath <- "C:/Development/Kaggle/House Prices - Advanced Regression Techniques/train.csv"
# Import data
dataset <- read.csv(training_data_filepath)
# View some stats and information about the data
summary(dataset)
# Split data into training and validation data, for both predictors and target.
set.seed(42)
split <- sample.split(dataset, SplitRatio=0.7)  # for training data
training_set <- subset(dataset, split==TRUE)
test_set <- subset(dataset, split==FALSE)
# Create the training and tests dataframe with the initial predictors
predictors <- c("LotArea", "YearBuilt", "X1stFlrSF", "X2ndFlrSF",
"FullBath", "BedroomAbvGr", "TotRmsAbvGrd", "SalePrice")
training_set <- training_set %>%
select(predictors)
test_set <- test_set %>%
select(predictors)
# Create the predictor variable
X <- training_set %>%
select(-SalePrice)
# Select the target variable and call it y
y <- training_set$SalePrice
# Fitting Random Forest Regression to the dataset
regressor <- randomForest(x=X, y=y, ntree=100)
# Predicting a new result
y_pred <- predict(regressor, newdata=test_set)
# Calculating the Mean Absolute Error
mae <- function(error)
{
mean(abs(error))
}
# Get the MAE
y_test <- test_set$SalePrice
error <- (y_pred - y_test)
mae(error)
# Create a function to get the MAE for multiple ntree values
getMae <- function(X, y, test_data, n) {
regressor <- randomForest(x=X, y=y, ntree=n)
y_prediction <- predict(regressor, newdata=test_data)
y_test <- test_data$SalePrice
error <- (y_prediction - y_test)
print(paste("ntree equals", n, ":", mae(error)))
}
# Loop through multiple ntree values
ntrees = c(10, 50, 100, 500, 1000, 5000)
for (i in ntrees) {
getMae(X, y, test_set, i)
}
?paste
paste("1st", "2nd", "3rd", collapse = ", ")
paste("1st", "2nd", "3rd", sep = ", ")
paste("1st", "2nd", "3rd", sep = "")
getMae <- function(X, y, test_data, n) {
regressor <- randomForest(x=X, y=y, ntree=n)
y_prediction <- predict(regressor, newdata=test_data)
y_test <- test_data$SalePrice
error <- (y_prediction - y_test)
print(paste("ntree equals ", n, ": ", mae(error), sep=""))
}
for (i in ntrees) {
getMae(X, y, test_set, i)
}
getMae <- function(X, y, test_data, n) {
set.seed(42)
regressor <- randomForest(x=X, y=y, ntree=n)
y_prediction <- predict(regressor, newdata=test_data)
y_test <- test_data$SalePrice
error <- (y_prediction - y_test)
print(paste("ntree equals ", n, ": ", mae(error), sep=""))
}
# Install and load packages
if (!require("randomForest")) {
install.packages("randomForest", repos="http://cran.rstudio.com/")
library(randomForest)
}
if (!require("dplyr")) {
install.packages("dplyr", repos="http://cran.rstudio.com/")
library(dplyr)
}
if (!require("caTools")) {
install.packages("caTools", repos="http://cran.rstudio.com/")
library(caTools)
}
# Save filepath to variable
training_data_filepath <- "C:/Development/Kaggle/House Prices - Advanced Regression Techniques/train.csv"
# Import data
dataset <- read.csv(training_data_filepath)
# View some stats and information about the data
summary(dataset)
# Split data into training and validation data, for both predictors and target.
set.seed(42)
split <- sample.split(dataset, SplitRatio=0.7)  # for training data
training_set <- subset(dataset, split==TRUE)
test_set <- subset(dataset, split==FALSE)
# Create the training and tests dataframe with the initial predictors
predictors <- c("LotArea", "YearBuilt", "X1stFlrSF", "X2ndFlrSF",
"FullBath", "BedroomAbvGr", "TotRmsAbvGrd", "SalePrice")
training_set <- training_set %>%
select(predictors)
test_set <- test_set %>%
select(predictors)
# Create the predictor variable
X <- training_set %>%
select(-SalePrice)
# Select the target variable and call it y
y <- training_set$SalePrice
# Fitting Random Forest Regression to the dataset
regressor <- randomForest(x=X, y=y, ntree=100)
# Predicting a new result
y_pred <- predict(regressor, newdata=test_set)
# Calculating the Mean Absolute Error
mae <- function(error)
{
mean(abs(error))
}
# Get the MAE
y_test <- test_set$SalePrice
error <- (y_pred - y_test)
mae(error)
# Create a function to get the MAE for multiple ntree values
getMae <- function(X, y, test_data, n) {
set.seed(42)
regressor <- randomForest(x=X, y=y, ntree=n)
y_prediction <- predict(regressor, newdata=test_data)
y_test <- test_data$SalePrice
error <- (y_prediction - y_test)
print(paste("ntree equals ", n, ": ", mae(error), sep=""))
}
# Loop through multiple ntree values
ntrees = c(10, 50, 100, 500, 1000, 5000)
for (i in ntrees) {
getMae(X, y, test_set, i)
}
?randomForest
for (i in ntrees) {
getMae(X, y, test_set, i)
}
